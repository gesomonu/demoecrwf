name: Build and Push Docker Image

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install dependencies
        run: |
          sudo apt-get install -y jq
          echo "Dependencies installed"

  build:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_URI }}

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build -t web-reporting:latest .

      - name: Save Docker Image
        run: |
          echo "Saving Docker image..."
          docker save web-reporting:latest -o web-reporting-latest.tar

  push:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_URI }}

      - name: Load Docker Image from Build Step
        run: |
          echo "Loading Docker image..."
          docker load --input web-reporting-latest.tar

      - name: Get Version from Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Tag Docker Image
        run: |
          IMAGE_TAG=${{ steps.version.outputs.version }}
          echo "Tagging Docker image with version: $IMAGE_TAG"
          docker tag web-reporting:latest ${{ secrets.ECR_URI }}:latest
          docker tag web-reporting:latest ${{ secrets.ECR_URI }}:$IMAGE_TAG

      - name: Push Docker Image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push ${{ secrets.ECR_URI }}:latest
          docker push ${{ secrets.ECR_URI }}:${{ steps.version.outputs.version }}

      - name: Write image definitions
        run: |
          IMAGE_TAG=${{ steps.version.outputs.version }}
          echo "Writing image definitions..."
          printf '[{"name":"web","imageUri":"%s"}]' ${{ secrets.ECR_URI }}:$IMAGE_TAG > imagedefinitions.json

      - name: Upload imagedefinitions.json
        uses: actions/upload-artifact@v3
        with:
          name: imagedefinitions
          path: imagedefinitions.json

  release:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}  # If you're publishing a package to npm
